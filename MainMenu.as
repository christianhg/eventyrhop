package  {		import flash.display.MovieClip;	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;	import fairytales.Fairytale;	import fairytales.fairyPrincess.FairyPrincess;	import fairytales.fairyClumsy.FairyClumsy;	import fairytales.fairyDuckling.FairyDuckling;	import fairytales.fairyMermaid.FairyMermaid;	import flash.events.Event;	import flash.display.Loader;	import flash.system.LoaderContext;	import flash.utils.ByteArray;	import flash.net.SharedObject;	import utilities.Functions;	import flash.net.NetConnection;	import flash.net.Responder;		public class MainMenu extends MovieClip {				[Embed(source="assets/images/menuBg.png")]		private var BackgroundImage:Class;				[Embed(source="assets/images/highscoreMenu.png")]		private var HighscoreMenuImage:Class;				[Embed(source="assets/images/lockMenu.png")]		private var LockMenuImage:Class;				[Embed(source="assets/images/mapMenu.png")]		private var MapMenuImage:Class;				[Embed(source="assets/globe.swf", symbol="Globe")]		public static var Globe:Class;				private var _backgroundImage:DisplayObject;		private var _background:Sprite		private var _highscoreMenuImage:DisplayObject;		private var _highscoreMenu:Sprite;		private var _lockMenuImage:DisplayObject;		private var _lockMenu:Sprite;		private var _mapMenuImage:DisplayObject;		private var _mapMenu:Sprite;		private var _fairyPrincessMenu:MovieClip;		private var _fairyDucklingMenu:MovieClip;		private var _fairyQueenMenu:MovieClip;		private var _fairyClumsyMenu:MovieClip;		private var _fairyMermaidMenu:MovieClip;		private var _fairyNightingaleMenu:MovieClip;		private var _highscore:Highscore;		private var _lock:Lock;		private var _map:Map;				private var _currentGame:Fairytale;				private var _fairyPrincess:FairyPrincess;		private var _fairyClumsy:FairyClumsy;		private var _fairyDuckling:FairyDuckling;		private var _fairyMermaid:FairyMermaid;				private var _gameMemory:SharedObject;		private var _netConnection:NetConnection; 		private var _responder:Responder;		public function MainMenu() {			buildObjects();			placeObjects();		}				public function unlockGame(game:String):void		{			switch(game) 			{				case("princess"):					trace("princess unlocked");					_gameMemory.data.princessUnlocked = true;					_gameMemory.flush();					break;				case("duckling"):					trace("duckling unlocked");					_gameMemory.data.ducklingUnlocked = true;					_gameMemory.flush();					break;				case("mermaid"):					trace("mermaid unlocked");					_gameMemory.data.mermaidUnlocked = true;					_gameMemory.flush();					break;			}		}				private function gameUnlocked(game:String):Boolean		{			switch(game) 			{				case("princess"):					return _gameMemory.data.princessUnlocked;					break;				case("mermaid"):					return _gameMemory.data.mermaidUnlocked;					break;				case("duckling"):					return _gameMemory.data.ducklingUnlocked;					break;			}			return false;		}				private function logGameInstance():void		{			_netConnection = new NetConnection();			_responder = new Responder(handleLogGameInstanceResult, onLogGameInstancFault);					_netConnection.connect("http://hca.starbeast.dk/amfphp/");			_netConnection.call("Instance/logGameInstance", _responder, phoneId);		}				private function handleLogGameInstanceResult(result:Object):void {			trace(result.toString());		}				private function onLogGameInstancFault(e:*):void		{			for(var s:String in e) {				trace(s+" "+e[s]);			}		}				private function buildObjects():void		{			_gameMemory = SharedObject.getLocal("memory");			//_gameMemory.clear();			if(!_gameMemory.data.phoneId) {				_gameMemory.data.phoneId = Functions.generatePhoneId(7);				_gameMemory.flush();				logGameInstance();			}			trace(phoneId);						_highscore = new Highscore();			_highscore.addEventListener(Event.ADDED_TO_STAGE, highscoreAddedToStageHandler);			_highscore.addEventListener(Event.REMOVED_FROM_STAGE, highscoreRemovedFromStageHandler);			_lock = new Lock();			_lock.addEventListener(Event.ADDED_TO_STAGE, lockAddedToStageHandler);			_lock.addEventListener(Event.REMOVED_FROM_STAGE, lockRemovedFromStageHandler);			_map = new Map();			_map.addEventListener(Event.ADDED_TO_STAGE, mapAddedToStageHandler);			_map.addEventListener(Event.REMOVED_FROM_STAGE, mapRemovedFromStageHandler);						_highscoreMenuImage = new HighscoreMenuImage();			_highscoreMenu = new Sprite();			_highscoreMenu.addChild(_highscoreMenuImage);			_highscoreMenu.addEventListener(MouseEvent.CLICK, highscoreMenuClick);			_highscoreMenu.x = 350;			_highscoreMenu.y = 670;						_lockMenuImage = new LockMenuImage();			_lockMenu = new Sprite();			_lockMenu.addChild(_lockMenuImage);			_lockMenu.addEventListener(MouseEvent.CLICK, lockMenuClick);			_lockMenu.x = 200;			_lockMenu.y = 680;						_mapMenuImage = new MapMenuImage();			_mapMenu = new Sprite();			_mapMenu.addChild(_mapMenuImage);			_mapMenu.addEventListener(MouseEvent.CLICK, mapMenuClick);			_mapMenu.x = 50;			_mapMenu.y = 670;						_backgroundImage = new BackgroundImage();			_background = new Sprite();			_background.addChild(_backgroundImage);						//Clumsy			_fairyClumsyMenu = new Globe();			_fairyClumsyMenu.gotoAndStop("clumsy");			_fairyClumsyMenu.addEventListener(MouseEvent.CLICK, fairyClumsyMenuClick);			_fairyClumsyMenu.x = 90;			_fairyClumsyMenu.y = 147;						//Princess			_fairyPrincessMenu = new Globe();			if(gameUnlocked("princess")) {				_fairyPrincessMenu.gotoAndStop("princess");				_fairyPrincessMenu.addEventListener(MouseEvent.CLICK, fairyPrincessMenuClick);			} else {				_fairyPrincessMenu.gotoAndStop("lock");			}			_fairyPrincessMenu.x = 300;			_fairyPrincessMenu.y = 315;						//Duckling			_fairyDucklingMenu = new Globe();			if(gameUnlocked("duckling")) {				_fairyDucklingMenu.gotoAndStop("duckling");				_fairyDucklingMenu.addEventListener(MouseEvent.CLICK, fairyDucklingMenuClick);			} else {				_fairyDucklingMenu.gotoAndStop("lock");			}			_fairyDucklingMenu.x = 300;			_fairyDucklingMenu.y = 147;						//Mermaid			_fairyMermaidMenu = new Globe();			if(gameUnlocked("mermaid")) {				_fairyMermaidMenu.gotoAndStop("mermaid");				_fairyMermaidMenu.addEventListener(MouseEvent.CLICK, fairyMermaidMenuClick);				} else {				_fairyMermaidMenu.gotoAndStop("lock");			}			_fairyMermaidMenu.x = 90;			_fairyMermaidMenu.y = 315;						//Queen			_fairyQueenMenu = new Globe();			_fairyQueenMenu.gotoAndStop("none");			_fairyQueenMenu.x = 90;			_fairyQueenMenu.y = 492;									//Nightingale			_fairyNightingaleMenu = new Globe();			_fairyNightingaleMenu.gotoAndStop("none");			_fairyNightingaleMenu.x = 300;			_fairyNightingaleMenu.y = 492;		}				private function placeObjects():void		{			addChild(_background);			addChild(_highscoreMenu);			addChild(_lockMenu);			addChild(_mapMenu);			addChild(_fairyPrincessMenu);			addChild(_fairyDucklingMenu);			addChild(_fairyQueenMenu);			addChild(_fairyClumsyMenu);			addChild(_fairyMermaidMenu);			addChild(_fairyNightingaleMenu);		}				/*******************			LOCK		*******************/		private function lockMenuClick(e:MouseEvent):void		{			addChild(_lock);		}		private function lockAddedToStageHandler(e:Event):void		{			trace("** Lock ADDED **");						trace("** lockBackHandler ADDED **");			stage.addEventListener(KeyboardEvent.KEY_DOWN, lockBackHandler);		}		private function lockRemovedFromStageHandler(e:Event):void		{			trace("** Lock REMOVED **");						trace("** lockBackHandler REMOVED **");			stage.removeEventListener(KeyboardEvent.KEY_DOWN, lockBackHandler);		}		private function lockBackHandler(e:KeyboardEvent):void		{			if(e.keyCode == Keyboard.BACK) {				e.preventDefault();				e.stopImmediatePropagation();								removeChild(_lock);			}		}		/*******************			HIGHSCORE		*******************/				private function highscoreMenuClick(e:MouseEvent):void		{			addChild(_highscore);		}		private function highscoreAddedToStageHandler(e:Event):void		{			trace("** Highscore ADDED **");						trace("** highscoreBackHandler ADDED **");			stage.addEventListener(KeyboardEvent.KEY_DOWN, highscoreBackHandler);						_highscore.getHighscore();		}		private function highscoreRemovedFromStageHandler(e:Event):void		{			trace("** Highscore REMOVED **");						trace("** highscoreBackHandler REMOVED **");			stage.removeEventListener(KeyboardEvent.KEY_DOWN, highscoreBackHandler);		}		private function highscoreBackHandler(e:KeyboardEvent):void		{			if(e.keyCode == Keyboard.BACK) {				e.preventDefault();				e.stopImmediatePropagation();								removeChild(_highscore);			}		}				/*******************			MAP		*******************/				private function mapMenuClick(e:MouseEvent):void		{			addChild(_map);		}		private function mapAddedToStageHandler(e:Event):void		{			trace("** Map ADDED **");						trace("** mapBackHandler ADDED **");			stage.addEventListener(KeyboardEvent.KEY_DOWN, mapBackHandler);		}		private function mapRemovedFromStageHandler(e:Event):void		{			trace("** Map REMOVED **");						trace("** mapBackHandler REMOVED **");			stage.removeEventListener(KeyboardEvent.KEY_DOWN, mapBackHandler);		}		private function mapBackHandler(e:KeyboardEvent):void		{			if(e.keyCode == Keyboard.BACK) {				e.preventDefault();				e.stopImmediatePropagation();								removeChild(_map);			}		}				/*******************			CLUMSY		*******************/		private function fairyClumsyMenuClick(e:MouseEvent):void		{			startFairyClumsy();		}		private function startFairyClumsy():void 		{				_fairyClumsy = new FairyClumsy(stage);			currentGame = _fairyClumsy;			addChild(_fairyClumsy);		}				/*******************			PRINCESS		*******************/		private function fairyPrincessMenuClick(e:MouseEvent):void		{			startFairyPrincess();		}				private function startFairyPrincess():void 		{				_fairyPrincess = new FairyPrincess(stage);			currentGame = _fairyPrincess;			addChild(_fairyPrincess);			}				/*******************			MERMAID		*******************/		private function fairyMermaidMenuClick(e:MouseEvent):void		{			startFairyMermaid();		}				private function startFairyMermaid():void 		{				_fairyMermaid = new FairyMermaid(stage);			currentGame = _fairyMermaid;			addChild(_fairyMermaid);		}				/*******************			DUCKLING		*******************/		private function fairyDucklingMenuClick(e:MouseEvent):void		{			startFairyDuckling();		}				private function startFairyDuckling():void 		{				_fairyDuckling = new FairyDuckling(stage);			currentGame = _fairyDuckling;			addChild(_fairyDuckling);		}				//currentGame			public function get currentGame():Fairytale		{			return _currentGame;		}		public function set currentGame(value:Fairytale):void		{			_currentGame = value;		}				public function get phoneId():String		{			return _gameMemory.data.phoneId;		}	}	}