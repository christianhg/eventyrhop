package fairytales{	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;		public class Hero extends Sprite	{				//Private properties		private var _temporaryX:Number = 0;		private var _temporaryY:Number = 0;		private var _previousX:Number = 0;		private var _previousY:Number = 0;		private var _xPos:Number = 0;		private var _yPos:Number = 0;		private var _previousVY:Number = 0;		private var _goingDown:Boolean = undefined;		private var _onGround:Boolean = undefined;		private var _jumpForce:Number = -10;		private var _maxJumpLength:Number = 155;		private var _accelerationX:Number = 0;		private var _friction:Number = 0.96;		private var _speedLimit:Number = 5; 		private var _gravity:Number = 0.3;		private var _sensitivity:Number = 2;					private var _view:MovieClip;		private var _hitter:DisplayObject;					public function Hero()		{			addEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);		}				public function addedToStageHandler(event:Event):void		{			draw();						addEventListener(Event.REMOVED_FROM_STAGE, removedFromStageHandler);			removeEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);		}				public function removedFromStageHandler(event:Event):void		{			removeEventListener(Event.REMOVED_FROM_STAGE, removedFromStageHandler);		}				public function draw():void 		{			drawHero();			placeHitter();		}				public function update():void		{			//Previous vertical velocity			_previousVY = vy;						//Temporarily store current x and y position			_temporaryX = _xPos;				_temporaryY = _yPos;						//Apply acceleration to horizontal velocity			vx += _accelerationX;						//Apply friction to horizontal velocity			vx *= _friction;						//Apply gravity to vertical velocity			vy += _gravity;						//Limit the speed, except when the character is moving upwards			if (vx > _speedLimit) { //Right				vx = _speedLimit;			}			if (vx < -_speedLimit) { //Left				vx = -_speedLimit;			}			if (vy > _speedLimit * 2) { //Down				vy = _speedLimit * 2;			}							//Force the velocity to zero after it falls below 0.1			if (Math.abs(vx) < 0.1) {				vx = 0;			}			if (Math.abs(vy) < 0.1) {				vy = 0;			}						//Update xPos and yPos			_xPos += vx;			_yPos += vy;						//Temporary x, y becomes previous x, y			_previousX = _temporaryX;			_previousY = _temporaryY;							// When the velocity turns from 0 to positive, the hero is going downwards			if(Math.abs(_previousVY) < 0.3 && vy > 0) {				goingDown = true;			}						//Animate the view according to the horizontal velocity			if(vx < -2) {				view.gotoAndPlay("left");			} else if(vx > 2) {				view.gotoAndPlay("right");			} else {				view.gotoAndPlay("front");			}		}				/* To be overridden in subclass */		public function drawHero():void		{		}				/* To be overridden in subclass */		public function placeHitter():void		{		}				public function processKeyDown(event:KeyboardEvent):void		{			switch(event.keyCode)			{				case Keyboard.LEFT:						_accelerationX = -0.2;					break;				case Keyboard.RIGHT:					_accelerationX = 0.2;					break;			}		}				public function processKeyUp(event:KeyboardEvent):void		{			if (event.keyCode == Keyboard.LEFT || event.keyCode == Keyboard.RIGHT)			{				_accelerationX = 0;			}		}				public function set accelerationX(value:Number):void 		{			_accelerationX = value * _sensitivity;		}			//vx		public function get gravity():Number		{			return _gravity;		}		public function set gravity(value:Number):void		{			_gravity = value;		}		//vx		public function get vx():Number		{			return _xPos - _previousX;		}		public function set vx(value:Number):void		{			_previousX = _xPos - value;		}				//vy		public function get vy():Number		{			return _yPos - _previousY;		}		public function set vy(value:Number):void		{			_previousY = _yPos - value;		}						//setX		public function set setX(value:Number):void		{			_previousX = value - vx;			_xPos = value;		}				//setY		public function set setY(value:Number):void		{			_previousY = value - vy;			_yPos = value;		}				//xPos		public function get xPos():Number		{			return _xPos;		}		public function set xPos(value:Number):void		{			_xPos = value;		}				//yPos		public function get yPos():Number		{			return _yPos;		}		public function set yPos(value:Number):void		{			_yPos = value;		}		public function get previousY():Number		{			return _previousY;		}				//view		public function get view():MovieClip		{			return _view;			}		public function set view(value:MovieClip):void 		{			_view = value;		}				//goingDown		public function get goingDown():Boolean		{			return _goingDown;			}		public function set goingDown(value:Boolean):void		{			_goingDown = value;		}				//jumpForce		public function get jumpForce():Number		{			return _jumpForce;		}		public function set jumpForce(value:Number):void		{			_jumpForce = value;		}				//maxJumpLength		public function get maxJumpLength():Number		{			return _maxJumpLength;		}				//hitter		public function get hitter():DisplayObject 		{			return _hitter;		}		public function set hitter(value:DisplayObject):void		{			_hitter = value;		}	}}