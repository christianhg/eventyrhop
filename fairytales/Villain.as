package fairytales{	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;		public class Villain extends Sprite	{		private var _view:MovieClip;		private var _temporaryX:Number = 0;		private var _temporaryY:Number = 0;		private var _previousX:Number = 0;		private var _previousY:Number = 0;		private var _xPos:Number = 0;		private var _yPos:Number = 0;				public function Villain()		{			addEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);		}				public function addedToStageHandler(event:Event):void		{			draw();						addEventListener(Event.REMOVED_FROM_STAGE, removedFromStageHandler);			removeEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);		}				public function removedFromStageHandler(event:Event):void		{			removeEventListener(Event.REMOVED_FROM_STAGE, removedFromStageHandler);		}				public function draw():void 		{			drawVillain();		}					public function update(heroX:int):void 		{			previousX = xPos;						xPos = heroX;						//Animate the view according to the horizontal velocity			if(previousX > xPos) {				view.gotoAndPlay("left");			} else if(previousX < xPos) {				view.gotoAndPlay("right");			} else {				view.gotoAndPlay("front");			}		}					public function drawVillain():void		{		}				public function get view():MovieClip		{			return _view;			}		public function set view(value:MovieClip):void 		{			_view = value;		}				//vx		public function get vx():Number		{			return _xPos - _previousX;		}		public function set vx(value:Number):void		{			_previousX = _xPos - value;		}				//vy		public function get vy():Number		{			return _yPos - _previousY;		}		public function set vy(value:Number):void		{			_previousY = _yPos - value;		}				//setX		public function set setX(value:Number):void		{			_previousX = value - vx;			_xPos = value;		}				//setY		public function set setY(value:Number):void		{			_previousY = value - vy;			_yPos = value;		}				//previousX		public function get previousX():Number		{			return _previousX;		}		public function set previousX(value:Number):void		{			_previousX = value;		}				//xPos		public function get xPos():Number		{			return _xPos;		}		public function set xPos(value:Number):void		{			_xPos = value;		}				//yPos		public function get yPos():Number		{			return _yPos;		}		public function set yPos(value:Number):void		{			_yPos = value;		}	}}