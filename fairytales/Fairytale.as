package fairytales{		import utilities.TextBox;	import utilities.StageBoundaries;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.KeyboardEvent;	import flash.events.AccelerometerEvent;	import flash.sensors.Accelerometer;	import flash.ui.Keyboard;	import utilities.Functions;	import flash.events.TimerEvent; 	import flash.utils.Timer;	import flash.desktop.NativeApplication;	import flash.desktop.SystemIdleMode;	import flash.net.NetConnection;	import flash.net.Responder;		public class Fairytale extends MovieClip	{		private var _pause:Pause;		private var _gameOverScreen:GameOverScreen;		private var _background:Background;		private var _platforms:Array;		private var _platform:Platform;		private var _hero:Hero;		private var _villain:Villain;		private var _gameStage:Object;		private var _accelerometer:Accelerometer;		private var _platformLimit:Number;		private var _moveY:Number;		private var _buildFoundation:Boolean;		private var _score:Number;		private var _scoreText:TextBox;		private var _timer:Timer;		private var _innerBoundaries:Number;		private var _gamePlaying:Boolean;		private var _gameId:int;		private var _netConnection:NetConnection; 		private var _responder:Responder; 				public function Fairytale()		{		}				public function addedToStageHandler(event:Event):void		{			trace("** GAME ADDED: " + (this.parent as MovieClip).currentGame + " **");			startGame();			removeEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);			addEventListener(Event.REMOVED_FROM_STAGE, removedFromStageHandler);			NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.KEEP_AWAKE;		}				public function startGame():void		{						trace("** GAME STARTED **");			//Set game parameters			_accelerometer = new Accelerometer();			_buildFoundation = true;			_innerBoundaries = 20;			_moveY = 0;			_platformLimit = 30;			_score = 0;			_scoreText = new TextBox("", 24, 0xF1DBB1, 0x5E4C28);			_timer = new Timer(1000);			_timer.addEventListener(TimerEvent.TIMER, updateTimeHandler);			_timer.start();			_gamePlaying = true;			_platforms = new Array();						//Build and place game objects			buildObjects();			placeObjects();			addChild(_scoreText);						//Add event listeners			addEventListeners();						logGameStart();		}				private function logGameStart():void		{			_netConnection = new NetConnection();			_responder = new Responder(handleLogGameStartResult, onLogGameStartFault);					_netConnection.connect("http://hca.starbeast.dk/amfphp/");			_netConnection.call("GameLog/logGameStart", _responder, Functions.translateGame((this.parent as MovieClip).currentGame), (this.parent as MovieClip).phoneId);		}				private function handleLogGameStartResult(result:Object):void {			_gameId = result.toString();			//trace(result.toString());		}				private function onLogGameStartFault(e:*):void		{			for(var s:String in e) {				trace(s+" "+e[s]);			}		}				public function logGameEnd(gameOver:int):void		{			trace(_gameId);			_netConnection = new NetConnection();			_responder = new Responder(handleLogGameEndResult, onLogGameEndFault);					_netConnection.connect("http://hca.starbeast.dk/amfphp/");						_netConnection.call("GameLog/logGameEnd", _responder, _gameId, _score, gameOver);		}				private function handleLogGameEndResult(result:Object):void {			trace(result.toString());		}				private function onLogGameEndFault(e:*):void		{			for(var s:String in e) {				trace(s+" "+e[s]);			}		}				private function addEventListeners():void		{			trace("** EventListeners ADDED**");			gameStage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			gameStage.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler); 			_accelerometer.addEventListener(AccelerometerEvent.UPDATE, onAccelUpdate);			this.addEventListener(Event.ENTER_FRAME, enterFrameHandler);		}				private function removeEventListeners():void		{			trace("** EventListeners REMOVED**");			gameStage.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			gameStage.removeEventListener(KeyboardEvent.KEY_UP, keyUpHandler); 			_accelerometer.removeEventListener(AccelerometerEvent.UPDATE, onAccelUpdate);			this.removeEventListener(Event.ENTER_FRAME, enterFrameHandler);		}				private function gameOver():void		{			logGameEnd(1);			trace("** GAME OVER ** Score: " + _score);			removeEventListeners();			addGameOverScreen(_score); //Add the right game over screen for the specific game playing						trace("** gameOverScreeen ADDED **");			addChild(_gameOverScreen);						_gameOverScreen.addEventListener(Event.REMOVED_FROM_STAGE, gameOverScreenRemovedFromStageHandler);			_gameOverScreen.addHighscore.addEventListener(MouseEvent.CLICK, addHighscoreClick);						trace("** gameOverBackHandler ADDED **");			gameStage.addEventListener(KeyboardEvent.KEY_DOWN, gameOverBackHandler);						for each(var platform:Platform in _platforms) {				removeChild(platform);			}		}				private function addHighscoreClick(e:MouseEvent):void 		{			_gameOverScreen.addHighscoreDialog = new AddHighscoreDialog(_score, String((this.parent as MovieClip).currentGame));						trace("** addHighscoreDialog ADDED **");			addChild(_gameOverScreen.addHighscoreDialog);			_gameOverScreen.addHighscoreDialog.addEventListener(Event.REMOVED_FROM_STAGE, addHighscoreDialogRemovedFromStageHandler);						trace("** gameOverBackHandler REMOVED **");			gameStage.removeEventListener(KeyboardEvent.KEY_DOWN, gameOverBackHandler);						trace("** addHighscoreDialogBackHandler ADDED **");			gameStage.addEventListener(KeyboardEvent.KEY_DOWN, addHighscoreDialogBackHandler);		}				private function addHighscoreDialogBackHandler(event:KeyboardEvent):void 		{			if(event.keyCode == Keyboard.BACK) {					event.preventDefault();				event.stopImmediatePropagation();							removeChild(_gameOverScreen.addHighscoreDialog);			}		}				private function addHighscoreDialogRemovedFromStageHandler(e:Event):void		{			trace("** addHighscoreDialog removed **");						trace("** addHighscoreDialogBackHandler REMOVED **");			gameStage.removeEventListener(KeyboardEvent.KEY_DOWN, addHighscoreDialogBackHandler);							if(gamePlaying) {				trace("** gameOverBackHandler ADDED **");				gameStage.addEventListener(KeyboardEvent.KEY_DOWN, gameOverBackHandler);			}		}				private function gameOverBackHandler(event:KeyboardEvent):void 		{			if(event.keyCode == Keyboard.BACK) {				event.preventDefault();				event.stopImmediatePropagation();								trace("** gameOverBackHandler REMOVED **");				gameStage.removeEventListener(KeyboardEvent.KEY_DOWN, gameOverBackHandler);								gamePlaying = false;				this.parent.removeChild(this); //Quit game			}		}				private function removedFromStageHandler(e:Event):void		{			trace("** " + (this.parent as MovieClip).currentGame + " REMOVED **");			removeEventListeners();			NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.NORMAL;		}				private function pauseGame():void		{			removeEventListeners();						trace("** pauseBackHandler ADDED **");			gameStage.addEventListener(KeyboardEvent.KEY_DOWN, pauseBackHandler);						trace("** pause ADDED **");			addChild(_pause);			_pause.addEventListener(Event.REMOVED_FROM_STAGE, pauseRemovedFromStageHandler);						NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.NORMAL;		}				private function pauseBackHandler(event:KeyboardEvent):void 		{			if(event.keyCode == Keyboard.BACK) {				event.preventDefault();				event.stopImmediatePropagation();								removeChild(_pause);			}		}						public function pauseRemovedFromStageHandler(event:Event):void		{			trace("** pause REMOVED **");			_pause.removeEventListener(Event.REMOVED_FROM_STAGE, pauseRemovedFromStageHandler);						trace("** pauseBackHandler REMOVED **");			gameStage.removeEventListener(KeyboardEvent.KEY_DOWN, pauseBackHandler);						if(_gamePlaying) resumeGame();		}						public function gameOverScreenRemovedFromStageHandler(event:Event):void		{			trace("** GameOverScreen REMOVED **");			_gameOverScreen.removeEventListener(Event.REMOVED_FROM_STAGE, gameOverScreenRemovedFromStageHandler);						trace("** gameOverBackHandler REMOVED **");			gameStage.removeEventListener(KeyboardEvent.KEY_DOWN, gameOverBackHandler);						if(_gamePlaying) startGame();		}				private function resumeGame():void		{			trace("** GAME RESUMED **");			addEventListeners();						NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.KEEP_AWAKE;		}				private function updateTimeHandler(e:TimerEvent):void		{			//_score += _timer.currentCount;		}				private function onAccelUpdate(e:AccelerometerEvent):void		{			hero.accelerationX = e.accelerationX * -1;		}				/* To be overridden in subclass */		public function buildObjects():void		{		}				/* To be overridden in subclass */		public function addPlatform():void		{		}				/* To be overridden in subclass */		public function addGameOverScreen(score:Number):void		{		}				private function placeObjects():void		{			placePlatforms();			placeHero();			placeVillain();		}				public function addPlatforms():void		{			for(var i:int; i < platformLimit; i++) {				addPlatform();				this.addChild(platform);				platforms.push(platform);			}		}						private function placePlatforms():void		{			for(var i:int; i < platformLimit; i++) {				if(i >= Math.round(gameStage.stageWidth / platform.width) - 1) {					buildFoundation = false;				}				placePlatform(platforms[i]);			}		}				public function addHero(value:Hero):void 		{			hero = value;					this.addChild(hero);		}				private function placeHero():void		{			hero.setX = -( - gameStage.stageWidth) * 0.5; // Centre			hero.setY = -( - gameStage.stageHeight) * 0.7;		}				public function addVillain(value:Villain):void		{			villain = value;				this.addChild(villain);		}				private function placeVillain():void		{			villain.setX = hero.xPos;					villain.setY = gameStage.stageHeight - villain.height * 0.5 - _innerBoundaries;		}				public function addBackground(value:Background):void		{			_background = value;			this.addChild(_background);		}						public function addPause():void		{			_pause = new Pause();		}				private function keyDownHandler(event:KeyboardEvent):void 		{			hero.processKeyDown(event);			if(event.keyCode == Keyboard.BACK) {				event.preventDefault();				event.stopImmediatePropagation();							pauseGame();			}		}				private function keyUpHandler(event:KeyboardEvent):void 		{			hero.processKeyUp(event);		}				private function enterFrameHandler(event:Event):void		{				moveHero();			moveVillain();			movePlatforms();			moveTrickyPlatforms();			updateScore();		}		private function moveHero():void 		{									//Test if the hero hits the villain			if(_score > 50 && _hero.hitter.hitTestObject(villain)) {				gameOver();			}						//Test if the hero hits a platform			if(_hero.goingDown) { //Check that the hero is going downwards				for each(var platform:Platform in _platforms) { //Iterate through each platform					if(_hero.hitter.hitTestObject(platform)) { //Test if the hero hits given platform						if(platform.isBad) {							platform.alpha = 0;						} else {							_hero.vy = 0; //Reset velocity							_hero.y = platform.y + platform.height * 0.5 - _hero.height * 0.5; //Position untop of the platform							var l:Number = ((_hero.y + _hero.height * 0.5) - (_gameStage.stageHeight * 0.5)); //Determine jump length							var m:Number = 1/3;							var n:Number = 0; //JumpForce							while(l > 0) {								n += m;								l -= n;							}							_hero.vy += -n;							 							_hero.goingDown = false; //Hero is now going up							moveY = gameStage.stageHeight - villain.height - (platform.y - platform.height * 0.5) - villain.height - _innerBoundaries;						}						break; //Break the loop					}				}							}						_hero.x = _hero.xPos;			_hero.y = _hero.yPos;						_hero.update();						StageBoundaries.wrap(_hero, _gameStage);		}				private function moveVillain():void 		{			_villain.x = _villain.xPos;			_villain.y = _villain.yPos;			_villain.update(_hero.xPos);		}				private function movePlatforms():void		{			if(moveY > 0) {				for each(var platform:Platform in _platforms) {					platform.y += moveY / 30;					if(platform.y > gameStage.stageHeight) {						placePlatform(platform);					}				}				moveY -= moveY / 30;				_score += Math.round(moveY / 30);			}		}				private function moveTrickyPlatforms():void 		{			for each(var platform:Platform in _platforms) {				if(platform.isTricky) { 					platform.x += platform.dir;					if(platform.x > gameStage.stageWidth - platform.width * 0.5 || platform.x < 0 + platform.width * 0.5) {						platform.dir *= -1;					}				}			}		}				public function placePlatform(platform:Platform):void		{			removeBad(platform);			removeTricky(platform);						var highestPlatformY:Number = gameStage.stageHeight;			var stageGap:Number = ((gameStage.stageWidth - (Math.round(gameStage.stageWidth / platform.width) - 1) * platform.width) * 0.5);						if(!buildFoundation) { //We are not building the foundation anymore				for each(var p:Platform in _platforms) {					if(p.y < highestPlatformY && p.y != 0) highestPlatformY = p.y;				}				platform.x = Functions.randomNumber(platform.width * 0.5, gameStage.stageWidth - platform.width);				platform.y = Functions.randomNumber(highestPlatformY - platform.height * 2, highestPlatformY - platform.height * 3);				makeBad(platform);				makeTricky(platform);			} else { //We are building the foundation				platform.x = stageGap + (platform.width * (_platforms.indexOf(platform))) + platform.width * 0.5;					platform.y = Functions.randomNumber(highestPlatformY - platform.height, highestPlatformY - platform.height * 2) - villain.height - (platform.height * 2);// - _innerBoundaries;			}		}				private function makeTricky(platform:Platform):void		{			if(Functions.randomNumber(1, 5) == 3) {				platform.isTricky = true;			}		}				private function removeTricky(platform:Platform):void		{			if(platform.isTricky) {				platform.isTricky = false;			}		}				private function removeBad(platform:Platform):void		{			if(platform.isBad) {				platform.isBad = false;			   	platform.alpha = 1;			}		}				private function makeBad(platform:Platform):void		{			if(Functions.randomNumber(1, 8) == 3) {				platform.isBad = true;				platform.alpha = 0.5;			}		}				private function updateScore():void 		{			_scoreText.text = Math.round(_score);		}				//gamePLaying		public function get gamePlaying():Boolean 		{			return _gamePlaying;		}		public function set gamePlaying(value:Boolean):void		{			_gamePlaying = value;		}				//buildFoundation		public function get buildFoundation():Boolean 		{			return _buildFoundation;		}		public function set buildFoundation(value:Boolean):void		{			_buildFoundation = value;		}			//moveY		public function get moveY():Number 		{			return _moveY;		}		public function set moveY(value:Number):void 		{			_moveY = value;		}			//villain		public function get villain():Villain 		{			return _villain;		}		public function set villain(value:Villain):void		{			_villain = value;		}				//hero		public function get hero():Hero 		{			return _hero;		}		public function set hero(value:Hero):void		{			_hero = value;		}				//gameOverScreen		public function get gameOverScreen():GameOverScreen 		{			return _gameOverScreen;		}		public function set gameOverScreen(value:GameOverScreen):void		{			_gameOverScreen = value;		}				//platform		public function get platform():Platform 		{			return _platform;		}		public function set platform(value:Platform):void		{			_platform = value;		}				//gameStage		public function get gameStage():Object 		{			return _gameStage;		}		public function set gameStage(value:Object):void		{			_gameStage = value;		}				//platformLimit		public function get platformLimit():Number 		{			return _platformLimit;		}				//platforms		public function get platforms():Array 		{			return _platforms;		}		public function set platforms(value:Array):void 		{			_platforms = value;		}	}}